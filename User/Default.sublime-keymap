[
  { "keys": ["ctrl+shift+n"], "command": "new_window" },
  { "keys": ["ctrl+shift+w"], "command": "close_window" },
  { "keys": ["ctrl+o"], "command": "prompt_open" },
  { "keys": ["ctrl+alt+up"], "command": "switch_file", "args": {"extensions": ["cpp", "cxx", "cc", "c", "hpp", "hxx", "hh", "h", "ipp", "inl", "m", "mm"]} },
  { "keys": ["ctrl+n"], "command": "new_file" },
  { "keys": ["ctrl+s"], "command": "save" },
  { "keys": ["ctrl+shift+s"], "command": "prompt_save_as" },
  { "keys": ["ctrl+alt+s"], "command": "save_all" },
  { "keys": ["ctrl+w"], "command": "close" },

  { "keys": ["ctrl+k", "ctrl+b"], "command": "toggle_side_bar" },
  { "keys": ["ctrl+ctrl+f"], "command": "toggle_full_screen" },
  { "keys": ["ctrl+ctrl+shift+f"], "command": "toggle_distraction_free" },

  { "keys": ["ctrl+z"], "command": "undo" },
  { "keys": ["ctrl+shift+z"], "command": "redo" },
  { "keys": ["ctrl+y"], "command": "redo_or_repeat" },
  { "keys": ["ctrl+u"], "command": "soft_undo" },
  { "keys": ["ctrl+shift+u"], "command": "soft_redo" },

  { "keys": ["ctrl+x"], "command": "cut" },
  { "keys": ["ctrl+c"], "command": "copy" },
  { "keys": ["ctrl+v"], "command": "paste" },
  { "keys": ["ctrl+shift+v"], "command": "paste_and_indent" },
  { "keys": ["ctrl+k", "ctrl+v"], "command": "paste_from_history" },
  { "keys": ["ctrl+option+v"], "command": "paste_from_history" },

  { "keys": ["ctrl+alt+left"], "command": "move", "args": {"by": "subwords", "forward": false} },
  { "keys": ["ctrl+alt+right"], "command": "move", "args": {"by": "subword_ends", "forward": true} },
  { "keys": ["ctrl+alt+shift+left"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} },
  { "keys": ["ctrl+alt+shift+right"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} },

  { "keys": ["ctrl+left"], "command": "move", "args": {"by": "subwords", "forward": false} },
  { "keys": ["ctrl+right"], "command": "move", "args": {"by": "subword_ends", "forward": true} },
  { "keys": ["ctrl+shift+left"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} },
  { "keys": ["ctrl+shift+right"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} },

  { "keys": ["ctrl+alt+up"], "command": "scroll_lines", "args": {"amount": 1.0} },
  { "keys": ["ctrl+alt+down"], "command": "scroll_lines", "args": {"amount": -1.0} },

  { "keys": ["ctrl+shift+up"], "command": "select_lines", "args": {"forward": false} },
  { "keys": ["ctrl+shift+down"], "command": "select_lines", "args": {"forward": true} },

  { "keys": ["ctrl+shift+["], "command": "prev_view" },
  { "keys": ["ctrl+shift+]"], "command": "next_view" },
  { "keys": ["ctrl+alt+left"], "command": "prev_view" },
  { "keys": ["ctrl+alt+right"], "command": "next_view" },
  { "keys": ["ctrl+pagedown"], "command": "next_view" },
  { "keys": ["ctrl+pageup"], "command": "prev_view" },

  { "keys": ["ctrl+tab"], "command": "next_view_in_stack" },
  { "keys": ["ctrl+shift+tab"], "command": "prev_view_in_stack" },

  { "keys": ["ctrl+a"], "command": "select_all" },
  { "keys": ["ctrl+shift+l"], "command": "split_selection_into_lines" },
  { "keys": ["escape"], "command": "single_selection", "context":
    [
      { "key": "num_selections", "operator": "not_equal", "operand": 1 }
    ]
  },
  { "keys": ["escape"], "command": "clear_fields", "context":
    [
      { "key": "has_next_field", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["escape"], "command": "clear_fields", "context":
    [
      { "key": "has_prev_field", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["escape"], "command": "hide_panel", "args": {"cancel": true},
    "context":
    [
      { "key": "panel_visible", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["escape"], "command": "hide_overlay", "context":
    [
      { "key": "overlay_visible", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["escape"], "command": "hide_popup", "context":
    [
      { "key": "popup_visible", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["escape"], "command": "hide_auto_complete", "context":
    [
      { "key": "auto_complete_visible", "operator": "equal", "operand": true }
    ]
  },

  { "keys": ["ctrl+]"], "command": "indent" },
  { "keys": ["ctrl+["], "command": "unindent" },

  { "keys": ["tab"], "command": "insert_best_completion", "args": {"default": "\t", "exact": true} },
  { "keys": ["tab"], "command": "insert_best_completion", "args": {"default": "\t", "exact": false},
    "context":
    [
      { "key": "setting.tab_completion", "operator": "equal", "operand": true },
      { "key": "preceding_text", "operator": "not_regex_match", "operand": ".*\\b[0-9]+$", "match_all": true },
    ]
  },
  { "keys": ["tab"], "command": "replace_completion_with_next_completion", "context":
    [
      { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
      { "key": "setting.tab_completion", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["tab"], "command": "reindent", "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_match", "operand": "^$", "match_all": true },
      { "key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true }
    ]
  },
  { "keys": ["tab"], "command": "indent", "context":
    [
      { "key": "text", "operator": "regex_contains", "operand": "\n" }
    ]
  },
  { "keys": ["tab"], "command": "next_field", "context":
    [
      { "key": "has_next_field", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["tab"], "command": "commit_completion", "context":
    [
      { "key": "auto_complete_visible" },
      { "key": "setting.auto_complete_commit_on_tab" }
    ]
  },

  { "keys": ["shift+tab"], "command": "insert", "args": {"characters": "\t"} },
  { "keys": ["shift+tab"], "command": "unindent", "context":
    [
      { "key": "setting.shift_tab_unindent", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["shift+tab"], "command": "unindent", "context":
    [
      { "key": "preceding_text", "operator": "regex_match", "operand": "^[\t ]*" }
    ]
  },
  { "keys": ["shift+tab"], "command": "unindent", "context":
    [
      { "key": "text", "operator": "regex_contains", "operand": "\n" }
    ]
  },
  { "keys": ["shift+tab"], "command": "prev_field", "context":
    [
      { "key": "has_prev_field", "operator": "equal", "operand": true }
    ]
  },

  { "keys": ["ctrl+d"], "command": "find_under_expand" },
  { "keys": ["ctrl+k", "ctrl+d"], "command": "find_under_expand_skip" },
  { "keys": ["ctrl+shift+space"], "command": "expand_selection", "args": {"to": "scope"} },
  { "keys": ["ctrl+shift+m"], "command": "expand_selection", "args": {"to": "brackets"} },
  { "keys": ["ctrl+m"], "command": "move_to", "args": {"to": "brackets"} },
  { "keys": ["ctrl+shift+j"], "command": "expand_selection", "args": {"to": "indentation"} },
  { "keys": ["ctrl+shift+a"], "command": "expand_selection", "args": {"to": "tag"} },

  { "keys": ["ctrl+alt+."], "command": "close_tag" },

  { "keys": ["ctrl+q"], "command": "toggle_record_macro" },
  { "keys": ["ctrl+shift+q"], "command": "run_macro" },

  { "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line.sublime-macro"} },
  { "keys": ["ctrl+shift+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line Before.sublime-macro"} },
  { "keys": ["enter"], "command": "commit_completion", "context":
    [
      { "key": "auto_complete_visible" },
      { "key": "setting.auto_complete_commit_on_tab", "operand": false }
    ]
  },

  { "keys": ["ctrl+t"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["ctrl+p"], "command": "show_overlay", "args": {"overlay": "goto", "show_files": true} },
  { "keys": ["ctrl+shift+p"], "command": "show_overlay", "args": {"overlay": "command_palette"} },
  { "keys": ["ctrl+r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"} },
  { "keys": ["ctrl+g"], "command": "show_overlay", "args": {"overlay": "goto", "text": ":"} },
  { "keys": ["f12"], "command": "goto_definition" },
  { "keys": ["shift+f12"], "command": "goto_reference" },
  { "keys": ["ctrl+alt+down"], "command": "goto_definition" },
  { "keys": ["ctrl+alt+shift+down"], "command": "goto_reference" },
  { "keys": ["ctrl+shift+r"], "command": "goto_symbol_in_project" },
  { "keys": ["ctrl+minus"], "command": "jump_back" },
  { "keys": ["ctrl+shift+minus"], "command": "jump_forward" },

  { "keys": ["ctrl+i"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse": false} },
  { "keys": ["ctrl+shift+i"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse": true} },
  { "keys": ["ctrl+f"], "command": "show_panel", "args": {"panel": "find", "reverse": false} },
  { "keys": ["ctrl+alt+f"], "command": "show_panel", "args": {"panel": "replace", "reverse": false} },
  { "keys": ["ctrl+alt+e"], "command": "replace_next" },

  { "keys": ["ctrl+shift+g"], "command": "find_prev" },
  { "keys": ["ctrl+e"], "command": "slurp_find_string" },
  { "keys": ["ctrl+shift+e"], "command": "slurp_replace_string" },

  { "keys": ["alt+ctrl+g"], "command": "find_under" },
  { "keys": ["shift+alt+ctrl+g"], "command": "find_under_prev" },


  { "keys": ["ctrl+shift+f"], "command": "show_panel", "args": {"panel": "find_in_files"} },
  { "keys": ["f4"], "command": "next_result" },
  { "keys": ["shift+f4"], "command": "prev_result" },

  { "keys": ["ctrl+."], "command": "next_modification" },
  { "keys": ["ctrl+,"], "command": "prev_modification" },
  { "keys": ["ctrl+k", "ctrl+z"], "command": "revert_modification" },
  { "keys": ["ctrl+k", "ctrl+forward_slash"], "command": "toggle_inline_diff" },
  { "keys": ["ctrl+k", "ctrl+;"], "command": "toggle_inline_diff", "args": { "prefer_hide": true } },

  { "keys": ["f6"], "command": "toggle_setting", "args": {"setting": "spell_check"} },
  { "keys": ["ctrl+f6"], "command": "next_misspelling" },
  { "keys": ["ctrl+shift+f6"], "command": "prev_misspelling" },

  { "keys": ["ctrl+ctrl+up"], "command": "swap_line_up" },
  { "keys": ["ctrl+ctrl+down"], "command": "swap_line_down" },

  { "keys": ["ctrl+backspace"], "command": "delete_word", "args": { "forward": false, "sub_words": true } },
  { "keys": ["ctrl+delete"], "command": "delete_word", "args": { "forward": true, "sub_words": true } },

  { "keys": ["ctrl+forward_slash"], "command": "toggle_comment", "args": { "block": false } },
  { "keys": ["ctrl+alt+forward_slash"], "command": "toggle_comment", "args": { "block": true } },

  { "keys": ["ctrl+j"], "command": "join_lines" },
  { "keys": ["ctrl+shift+d"], "command": "duplicate_line" },

  { "keys": ["ctrl+backquote"], "command": "show_panel", "args": {"panel": "console", "toggle": true} },

  { "keys": ["ctrl+space"], "command": "auto_complete" },
  { "keys": ["ctrl+space"], "command": "replace_completion_with_auto_complete", "context":
    [
      { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
      { "key": "auto_complete_visible", "operator": "equal", "operand": false },
      { "key": "setting.tab_completion", "operator": "equal", "operand": true }
    ]
  },

  { "keys": ["ctrl+alt+p"], "command": "show_scope_name" },

  { "keys": ["f7"], "command": "build" },
  { "keys": ["ctrl+b"], "command": "build" },
  { "keys": ["ctrl+shift+b"], "command": "build", "args": {"select": true} },

  { "keys": ["alt+c"], "command": "cancel_build" },

  { "keys": ["ctrl+t"], "command": "transpose" },

  { "keys": ["f5"], "command": "sort_lines", "args": {"case_sensitive": false} },
  { "keys": ["ctrl+f5"], "command": "sort_lines", "args": {"case_sensitive": true} },

  // Auto-pair quotes
  { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"$0\""}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double - punctuation.definition.string.end", "match_all": true }
    ]
  },
  { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"${0:$SELECTION}\""}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": ["\""], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\"", "match_all": true },
      { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double - punctuation.definition.string.end", "match_all": true },
    ]
  },
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\"$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\"", "match_all": true },
      { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double - punctuation.definition.string.end", "match_all": true },
    ]
  },

  // Auto-pair single quotes
  { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'$0'"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
    ]
  },
  { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'${0:$SELECTION}'"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": ["'"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
      { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
    ]
  },
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "'$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
      { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
    ]
  },

  // Auto-pair brackets
  { "keys": ["("], "command": "insert_snippet", "args": {"contents": "($0)"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }
    ]
  },
  { "keys": ["("], "command": "insert_snippet", "args": {"contents": "(${0:$SELECTION})"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": [")"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true }
    ]
  },
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true }
    ]
  },

  // Auto-pair square brackets
  { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[$0]"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|;|\\}|$)", "match_all": true }
    ]
  },
  { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[${0:$SELECTION}]"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": ["]"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true }
    ]
  },
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\[$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true }
    ]
  },

  // Auto-pair curly brackets
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{$0}"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true }
    ]
  },
  { "keys": ["{"], "command": "wrap_block", "args": {"begin": "{", "end": "}"}, "context":
    [
      { "key": "indented_block", "match_all": true },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true },
    ]
  },
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{${0:$SELECTION}}"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": ["}"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },
  { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },

  { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Braces.sublime-macro"}, "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },
  { "keys": ["shift+enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Braces.sublime-macro"}, "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  },

  { "keys": ["enter"], "command": "auto_indent_tag", "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "selector", "operator": "equal", "operand": "punctuation.definition.tag.begin", "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": ">$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^</", "match_all": true },
    ]
  },
  { "keys": ["shift+enter"], "command": "auto_indent_tag", "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "selector", "operator": "equal", "operand": "punctuation.definition.tag.begin", "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": ">$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^</", "match_all": true },
    ]
  },

  {
    "keys": ["ctrl+alt+1"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1]]
    }
  },
  {
    "keys": ["ctrl+alt+2"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
    }
  },
  {
    "keys": ["ctrl+alt+3"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.33, 0.66, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]]
    }
  },
  {
    "keys": ["ctrl+alt+4"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.25, 0.5, 0.75, 1.0],
      "rows": [0.0, 1.0],
      "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1], [3, 0, 4, 1]]
    }
  },
  {
    "keys": ["ctrl+alt+shift+2"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 0.5, 1.0],
      "cells": [[0, 0, 1, 1], [0, 1, 1, 2]]
    }
  },
  {
    "keys": ["ctrl+alt+shift+3"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 1.0],
      "rows": [0.0, 0.33, 0.66, 1.0],
      "cells": [[0, 0, 1, 1], [0, 1, 1, 2], [0, 2, 1, 3]]
    }
  },
  {
    "keys": ["ctrl+alt+5"],
    "command": "set_layout",
    "args":
    {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 0.5, 1.0],
      "cells":
      [
        [0, 0, 1, 1], [1, 0, 2, 1],
        [0, 1, 1, 2], [1, 1, 2, 2]
      ]
    }
  },
  { "keys": ["ctrl+1"], "command": "focus_group", "args": { "group": 0 } },
  { "keys": ["ctrl+2"], "command": "focus_group", "args": { "group": 1 } },
  { "keys": ["ctrl+3"], "command": "focus_group", "args": { "group": 2 } },
  { "keys": ["ctrl+4"], "command": "focus_group", "args": { "group": 3 } },
  { "keys": ["ctrl+5"], "command": "focus_group", "args": { "group": 4 } },
  { "keys": ["ctrl+6"], "command": "focus_group", "args": { "group": 5 } },
  { "keys": ["ctrl+7"], "command": "focus_group", "args": { "group": 6 } },
  { "keys": ["ctrl+8"], "command": "focus_group", "args": { "group": 7 } },
  { "keys": ["ctrl+9"], "command": "focus_group", "args": { "group": 8 } },
  { "keys": ["ctrl+shift+1"], "command": "move_to_group", "args": { "group": 0 } },
  { "keys": ["ctrl+shift+2"], "command": "move_to_group", "args": { "group": 1 } },
  { "keys": ["ctrl+shift+3"], "command": "move_to_group", "args": { "group": 2 } },
  { "keys": ["ctrl+shift+4"], "command": "move_to_group", "args": { "group": 3 } },
  { "keys": ["ctrl+shift+5"], "command": "move_to_group", "args": { "group": 4 } },
  { "keys": ["ctrl+shift+6"], "command": "move_to_group", "args": { "group": 5 } },
  { "keys": ["ctrl+shift+7"], "command": "move_to_group", "args": { "group": 6 } },
  { "keys": ["ctrl+shift+8"], "command": "move_to_group", "args": { "group": 7 } },
  { "keys": ["ctrl+shift+9"], "command": "move_to_group", "args": { "group": 8 } },
  { "keys": ["ctrl+0"], "command": "focus_side_bar" },

  { "keys": ["ctrl+k", "ctrl+up"], "command": "new_pane" },
  { "keys": ["ctrl+k", "ctrl+shift+up"], "command": "new_pane", "args": {"move": false} },
  { "keys": ["ctrl+k", "ctrl+down"], "command": "close_pane" },
  { "keys": ["ctrl+k", "ctrl+left"], "command": "focus_neighboring_group", "args": {"forward": false} },
  { "keys": ["ctrl+k", "ctrl+right"], "command": "focus_neighboring_group" },
  { "keys": ["ctrl+k", "ctrl+shift+left"], "command": "move_to_neighboring_group", "args": {"forward": false} },
  { "keys": ["ctrl+k", "ctrl+shift+right"], "command": "move_to_neighboring_group" },

  { "keys": ["ctrl+1"], "command": "select_by_index", "args": { "index": 0 } },
  { "keys": ["ctrl+2"], "command": "select_by_index", "args": { "index": 1 } },
  { "keys": ["ctrl+3"], "command": "select_by_index", "args": { "index": 2 } },
  { "keys": ["ctrl+4"], "command": "select_by_index", "args": { "index": 3 } },
  { "keys": ["ctrl+5"], "command": "select_by_index", "args": { "index": 4 } },
  { "keys": ["ctrl+6"], "command": "select_by_index", "args": { "index": 5 } },
  { "keys": ["ctrl+7"], "command": "select_by_index", "args": { "index": 6 } },
  { "keys": ["ctrl+8"], "command": "select_by_index", "args": { "index": 7 } },
  { "keys": ["ctrl+9"], "command": "select_by_index", "args": { "index": 8 } },
  { "keys": ["ctrl+0"], "command": "select_by_index", "args": { "index": 9 } },

  { "keys": ["f2"], "command": "next_bookmark" },
  { "keys": ["shift+f2"], "command": "prev_bookmark" },
  { "keys": ["ctrl+f2"], "command": "toggle_bookmark" },
  { "keys": ["ctrl+shift+f2"], "command": "clear_bookmarks" },
  { "keys": ["alt+f2"], "command": "select_all_bookmarks" },

  { "keys": ["ctrl+r"], "command": "next_bookmark" },
  { "keys": ["ctrl+shift+r"], "command": "toggle_bookmark" },

  { "keys": ["ctrl+k", "ctrl+u"], "command": "upper_case" },
  { "keys": ["ctrl+k", "ctrl+l"], "command": "lower_case" },
  { "keys": ["ctrl+k", "ctrl+space"], "command": "set_mark" },
  { "keys": ["ctrl+k", "ctrl+a"], "command": "select_to_mark" },
  { "keys": ["ctrl+k", "ctrl+w"], "command": "delete_to_mark" },
  { "keys": ["ctrl+k", "ctrl+x"], "command": "swap_with_mark" },
  { "keys": ["ctrl+k", "ctrl+g"], "command": "clear_bookmarks", "args": {"name": "mark"} },

  { "keys": ["ctrl+equals"], "command": "increase_font_size" },
  { "keys": ["ctrl+plus"], "command": "increase_font_size" },
  { "keys": ["ctrl+minus"], "command": "decrease_font_size" },

  { "keys": ["ctrl+shift+w"], "command": "insert_snippet", "args": { "name": "Packages/XML/Snippets/long-tag.sublime-snippet" } },

  { "keys": ["ctrl+shift+k"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },

  { "keys": ["ctrl+alt+q"], "command": "wrap_lines" },

  { "keys": ["ctrl+alt+["], "command": "fold" },
  { "keys": ["ctrl+alt+]"], "command": "unfold" },
  { "keys": ["ctrl+k", "ctrl+1"], "command": "fold_by_level", "args": {"level": 1} },
  { "keys": ["ctrl+k", "ctrl+2"], "command": "fold_by_level", "args": {"level": 2} },
  { "keys": ["ctrl+k", "ctrl+3"], "command": "fold_by_level", "args": {"level": 3} },
  { "keys": ["ctrl+k", "ctrl+4"], "command": "fold_by_level", "args": {"level": 4} },
  { "keys": ["ctrl+k", "ctrl+5"], "command": "fold_by_level", "args": {"level": 5} },
  { "keys": ["ctrl+k", "ctrl+6"], "command": "fold_by_level", "args": {"level": 6} },
  { "keys": ["ctrl+k", "ctrl+7"], "command": "fold_by_level", "args": {"level": 7} },
  { "keys": ["ctrl+k", "ctrl+8"], "command": "fold_by_level", "args": {"level": 8} },
  { "keys": ["ctrl+k", "ctrl+9"], "command": "fold_by_level", "args": {"level": 9} },
  { "keys": ["ctrl+k", "ctrl+0"], "command": "unfold_all" },
  { "keys": ["ctrl+k", "ctrl+j"], "command": "unfold_all" },
  { "keys": ["ctrl+k", "ctrl+t"], "command": "fold_tag_attributes" },

  { "keys": ["ctrl+alt+o"], "command": "toggle_overwrite" },

  { "keys": ["alt+f2"], "command": "context_menu" },

  { "keys": ["ctrl+alt+c"], "command": "toggle_case_sensitive", "context":
    [
      { "key": "setting.is_widget", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["ctrl+alt+r"], "command": "toggle_regex", "context":
    [
      { "key": "setting.is_widget", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["ctrl+alt+w"], "command": "toggle_whole_word", "context":
    [
      { "key": "setting.is_widget", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["ctrl+alt+a"], "command": "toggle_preserve_case", "context":
    [
      { "key": "setting.is_widget", "operator": "equal", "operand": true }
    ]
  },

  // Find panel key bindings
  { "keys": ["enter"], "command": "find_next", "context":
    [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["shift+enter"], "command": "find_prev", "context":
    [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+enter"], "command": "find_all", "args": {"close_panel": true},
     "context": [{"key": "panel", "operand": "find"}, {"key": "panel_has_focus"}]
  },

  // Replace panel key bindings
  { "keys": ["enter"], "command": "find_next", "context":
    [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["shift+enter"], "command": "find_prev", "context":
    [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+enter"], "command": "find_all", "args": {"close_panel": true},
    "context": [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["ctrl+alt+enter"], "command": "replace_all", "args": {"close_panel": true},
     "context": [{"key": "panel", "operand": "replace"}, {"key": "panel_has_focus"}]
  },

  // Incremental find panel key bindings
  { "keys": ["enter"], "command": "hide_panel", "context":
    [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["shift+enter"], "command": "find_prev", "context":
    [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["alt+enter"], "command": "find_all", "args": {"close_panel": true},
    "context": [{"key": "panel", "operand": "incremental_find"}, {"key": "panel_has_focus"}]
  },

  // Find in Files panel key bindings
  { "keys": ["alt+enter"], "command": "find_all",
     "context": [{"key": "panel", "operand": "find_in_files"}, {"key": "panel_has_focus"}]
  },
  { "keys": ["ctrl+alt+enter"], "command": "replace_all",
     "context": [{"key": "panel", "operand": "find_in_files"}, {"key": "panel_has_focus"}]
  },

  { "keys": ["ctrl+,"], "command": "edit_settings", "args":
    {
      "base_file": "${packages}/Default/Preferences.sublime-settings",
      "default": "// Settings in here override those in \"Default/Preferences.sublime-settings\",\n// and are overridden in turn by syntax-specific settings.\n{\n\t$0\n}\n"
    }
  },

  // HTML, XML close tag
  { "keys": ["/"], "command": "close_tag", "args": { "insert_slash": true }, "context":
    [
      { "key": "selector", "operator": "equal", "operand": "(text.html, text.xml) - string - comment", "match_all": true },
      { "key": "preceding_text", "operator": "regex_match", "operand": ".*<$", "match_all": true },
      { "key": "setting.auto_close_tags" }
    ]
  },
//
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 我的设置从这里开始
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 
// 


  { "keys": ["ctrl+alt+/"], "command": "sublime.log_commands(True)" },
  {
    "keys": ["ctrl+m", "ctrl+o"],
    "command": "bh_key",
    "args": {
      "plugin": {
        "type": ["__all__"],
        "command": "bh_modules.foldbracket"
      }
    }
  },
  {
    "keys": ["ctrl+alt+shift+i"],
    "command": "bh_async_key",
    "args": {
      "lines": true,
      "no_block_mode": null,
      "no_outside_adj": null,
      "plugin": {
        "args": {
          "select": "left"
        },
        "command": "bh_modules.bracketselect",
        "type": ["__all__"]
      }
    }
  },
  {
    "keys": ["ctrl+alt+shift+k"],
    "command": "bh_async_key",
    "args": {
      "lines": true,
      "no_block_mode": null,
      "no_outside_adj": null,
      "plugin": {
        "args": {
          "select": "right"
        },
        "command": "bh_modules.bracketselect",
        "type": ["__all__"]
      }
    }
  },
  {
    "no_outside_adj": null,
    "keys": ["ctrl+alt+shift+i", "ctrl+alt+shift+k"],
    "command": "bh_key",
    "args": {
      "lines": true,
      "plugin": {
        "type": ["__all__"],
        "command": "bh_modules.bracketselect"
      }
    }
  },
  // Remove brackets
  {
    "keys": ["ctrl+alt+shift+enter"],
    "command": "bh_remove_brackets"
  },
  { "keys": ["ctrl+d"], "command": "find_under_expand" },
  // { "keys": ["alt+u"], "command": "left_delete" },
  // { "keys": ["alt+o"], "command": "right_delete" },
  {
    "keys": ["alt+j"],
    "command": "move",
    "args": { "by": "characters", "forward": false }
  },
  {
    "keys": ["alt+l"],
    "command": "move",
    "args": { "by": "characters", "forward": true }
  },
  {
    "keys": ["alt+i"],
    "command": "move",
    "args": { "by": "lines", "forward": false }
  },
  {
    "keys": ["alt+k"],
    "command": "move",
    "args": { "by": "lines", "forward": true }
  },
  {
    "keys": ["ctrl+alt+j"],
    "command": "move",
    "args": { "by": "words", "forward": false }
  },
  {
    "keys": ["ctrl+alt+l"],
    "command": "move",
    "args": { "by": "word_ends", "forward": true }
  },
  {
    "keys": ["alt+shift+j"],
    "command": "move",
    "args": { "by": "characters", "forward": false, "extend": true }
  },
  {
    "keys": ["alt+shift+l"],
    "command": "move",
    "args": { "by": "characters", "forward": true, "extend": true }
  },
  {
    "keys": ["alt+shift+i"],
    "command": "move",
    "args": { "by": "lines", "forward": false, "extend": true }
  },
  {
    "keys": ["alt+shift+k"],
    "command": "move",
    "args": { "by": "lines", "forward": true, "extend": true }
  },
  {
    "keys": ["ctrl+alt+shift+j"],
    "command": "move",
    "args": { "by": "words", "forward": false, "extend": true }
  },
  {
    "keys": ["ctrl+alt+shift+l"],
    "command": "move",
    "args": { "by": "word_ends", "forward": true, "extend": true }
  },
  {
    "keys": ["alt+u"],
    "command": "move_to",
    "args": { "to": "bol", "extend": false }
  },
  {
    "keys": ["alt+o"],
    "command": "move_to",
    "args": { "to": "eol", "extend": false }
  },
  {
    "keys": ["ctrl+alt+i"],
    "command": "select_lines",
    "args": { "forward": false }
  },
  {
    "keys": ["ctrl+alt+k"],
    "command": "select_lines",
    "args": { "forward": true }
  },
  {
    "keys": ["alt+shift+u"],
    "command": "move_to",
    "args": { "to": "bol", "extend": true }
  },
  {
    "keys": ["alt+shift+o"],
    "command": "move_to",
    "args": { "to": "eol", "extend": true }
  },
  { "keys": ["alt+m"], "command": "cut" },
  { "keys": ["alt+,"], "command": "copy" },
  { "keys": ["alt+."], "command": "paste" },
  { "keys": ["alt+r"], "command": "reveal_in_side_bar" },
  { "keys": ["ctrl+tab"], "command": "next_view" },
  { "keys": ["ctrl+shift+tab"], "command": "prev_view" },
  { "keys": ["ctrl+alt+."], "command": "close_tag" },

  // jsPrettier
  { "keys": ["ctrl+alt+f"], "command": "js_prettier" },
  { "keys": ["ctrl+alt+p"], "command": "fmt_now" },
  // jsPrettier

  // backward
  { "keys": ["alt+left"], "command": "jump_back" },
  //forward
  { "keys": ["alt+right"], "command": "jump_forward" },
  // open current folder
  { "keys": ["f10"], "command": "side_bar_reveal" },
  //case convert
  { "keys": ["ctrl+k", "ctrl+t"], "command": "title_case" },
  { "keys": ["ctrl+k", "ctrl+s"], "command": "convert_to_snake" },
  { "keys": ["ctrl+k", "ctrl+c"], "command": "convert_to_camel" },
  { "keys": ["ctrl+k", "ctrl+w"], "command": "convert_to_separate_words" },
  { "keys": ["ctrl+k", "ctrl+d"], "command": "convert_to_dash" },
  { "keys": ["ctrl+k", "ctrl+u"], "command": "upper_case" },
  { "keys": ["ctrl+k", "ctrl+l"], "command": "lower_case" },

  { "keys": ["ctrl+shift+up"], "command": "swap_line_up" },
  { "keys": ["ctrl+shift+down"], "command": "swap_line_down" },

  // emmet
  // Expand abbreviation
  {
    "keys": ["ctrl+e"],
    "command": "emmet_expand_abbreviation"
  },

  // Wrap with Abbreviation
  {
    "keys": ["ctrl+alt+enter"],
    "command": "emmet_wrap_with_abbreviation",
    "context": [{ "key": "setting.is_widget", "operand": false }]
  },

  // Balance Outward
  {
    "keys": ["ctrl+shift+i"],
    "command": "emmet_balance",
    "args": { "direction": "outward" }
  },

  // Balance Inward
  {
    "keys": ["ctrl+shift+k"],
    "command": "emmet_balance",
    "args": { "direction": "inward" }
  },

  // Go to Matching Tag/Tag Pair
  {
    "keys": ["alt+["],
    "command": "emmet_go_to_tag_pair"
  },

  // Remove Tag
  {
    "keys": ["ctrl+r", "ctrl+m"],
    "command": "emmet_remove_tag"
  },

  // Rename Tag
  {
    "keys": ["ctrl+m", "ctrl+v"],
    "command": "emmet_rename_tag"
  },

  { "keys": ["alt+f"], "command": "find_all_under" },

  // Split/Join Tag
  // {
  //     "keys": ["shift+ctrl+`"],
  //     "command": "emmet_split_join_tag"
  // },

  // xdebug
  {
    "keys": ["f9"],
    "command": "xdebug_breakpoint"
  },
  {
    "keys": ["f8"],
    "command": "xdebug_continue",
    "args": { "command": "step_over" }
  },
  {
    "keys": ["f7"],
    "command": "xdebug_continue",
    "args": { "command": "step_into" }
  },
  {
    "keys": ["f11"],
    "command": "xdebug_continue",
    "args": { "command": "step_out" }
  },
  {
    "keys": ["f5"],
    "command": "xdebug_continue",
    "args": { "command": "run" }
  },
  {
    "keys": ["f6"],
    "command": "xdebug_run_to_line"
  },

  // home and end
  {
    "keys": ["home"],
    "command": "move_to",
    "args": { "to": "bol" }
  },
  {
    "keys": ["shift+home"],
    "command": "move_to",
    "args": { "to": "bol", "extend": true }
  },
  {
    "keys": ["end"],
    "command": "move_to",
    "args": { "to": "eol" }
  },
  {
    "keys": ["shift+end"],
    "command": "move_to",
    "args": { "to": "eol", "extend": true }
  },
  {
    "keys": ["ctrl+alt+right"],
    "command": "move",
    "args": { "by": "subword_ends", "forward": true }
  },
  {
    "keys": ["ctrl+right"],
    "command": "move",
    "args": { "by": "words", "forward": true, "extend": false }
  },
  {
    "keys": ["ctrl+alt+left"],
    "command": "move",
    "args": { "by": "subword_ends", "forward": false }
  },
  {
    "keys": ["ctrl+left"],
    "command": "move",
    "args": { "by": "words", "forward": false, "extend": false }
  },

  // Go to Next Edit Point
  {
    "keys": ["ctrl+alt+shift+right"],
    "command": "emmet_go_to_edit_point"
  },

  // Go to Previous Edit Point
  {
    "keys": ["ctrl+alt+shift+left"],
    "command": "emmet_go_to_edit_point",
    "args": { "previous": true }
  },

  // Select Next Item
  // {
  //     "keys": ["shift+ctrl+."],
  //     "command": "emmet_select_item"
  // },

  // Select Previous Item
  // {
  //     "keys": ["shift+ctrl+,"],
  //     "command": "emmet_select_item",
  //     "args": { "previous": true }
  // },

  // Evaluate Math Expression
  // {
  //     "keys": ["shift+ctrl+y"],
  //     "command": "emmet_evaluate_math"
  // },

  // Increment/Decrement Number
  {
    "keys": ["ctrl+up"],
    "command": "emmet_increment_number",
    "args": { "delta": 1 }
  },
  {
    "keys": ["ctrl+down"],
    "command": "emmet_increment_number",
    "args": { "delta": -1 }
  },
  {
    "keys": ["alt+up"],
    "command": "emmet_increment_number",
    "args": { "delta": 0.1 }
  },
  {
    "keys": ["alt+down"],
    "command": "emmet_increment_number",
    "args": { "delta": -0.1 }
  },
  {
    "keys": ["shift+alt+up"],
    "command": "emmet_increment_number",
    "args": { "delta": 10 }
  },
  {
    "keys": ["shift+alt+down"],
    "command": "emmet_increment_number",
    "args": { "delta": -10 }
  },

  // Update Image Size
  // {
  //     "keys": ["ctrl+u"],
  //     "command": "emmet_update_image_size"
  // },

  // Convert data:URL
  // {
  //     "keys": ["ctrl+'"],
  //     "command": "emmet_convert_data_url"
  // },

  // Rename Tag
  // {
  //   "keys": ["shift+ctrl+'"],
  //   "command": "emmet_rename_tag"
  // },
  // Swap brackets with another type
  {
    "keys": ["alt+s"],
    "command": "wrap_brackets"
  },
  // Convert single quote string to double quoted string and vice versa
  // Will handle escaping or unescaping quotes within the string
  {
    "keys": ["alt+q"],
    "command": "bh_key",
    "args": {
      "lines": true,
      "plugin": {
        "type": [
          "single_quote",
          "double_quote",
          "py_single_quote",
          "py_double_quote"
        ],
        "command": "bh_modules.swapquotes"
      }
    }
  },

  // html css javascript prettify
  {
    "keys": ["ctrl+shift+h"],
    "command": "htmlprettify"
  },
  {
     "keys": ["ctrl+l"],
     "command": "insert_snippet",
     "args":
     {
       "name": "Packages/User/snippet/consolelog.sublime-snippet"
     }
 },
]
